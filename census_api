### census_api.py ###

#####
# this scirpt pulls data from the US Census Bureau API specifically the ACS 1-Year
# dataset end point; the script pulls total population, total renter occupied households
# and total renter occupied households with tenants aged 15-34 by state and year;
# pulling tenants aged 15-34 becuase it's the most relevant data point available
#####



### BEGIN SCRIPT ###
import requests
import pandas as pd


# the initial portion fo this script focuses on pulling data from the API

# setup static elements of base request url
host = 'https://api.census.gov/data'
dataset = 'acs/acs1'

# establish varaiable parameters for get request; focused on data that is relevant
# to the multifamily industry, attempt to identify real demand for apartments
predicates = {}
get_vars = ['NAME', 'B01001_001E', 'B25033_008E', 'B25125_027E', 'B25125_028E', 
            'B25125_029E', 'B25125_030E', 'B25125_034E', 'B25125_035E', 'B25125_036E',
            'B25125_037E', 'B25125_041E', 'B25125_042E', 'B25125_043E', 'B25125_044E']
predicates['get'] = ','.join(get_vars)
predicates['for'] = 'state:*'

# iterate through list of years for response data across multiple years

# setup list of years for iterating through
years_list = ['2021', '2020', '2019', '2018', '2017', '2016', '2015', '2014', 
              '2013', '2012', '2011']

# setup empty dataframe for appending response data rows to 
cols = ['name', 'tot_pop', 'tot_rent_pop', '15-34_rent_multi_1', '15-34_rent_multi_2',
        '15-34_rent_multi_3', '15-34_rent_multi_4', '35-64_rent_multi_1', '35-64_rent_multi_2', 
        '35-64_rent_multi_3', '35-64_rent_multi_4', '65up_rent_multi_1', '65up_rent_multi_2', 
        '65up_rent_multi_3', '65up_rent_multi_4', 'state', 'year']
df = pd.DataFrame(columns=cols)

# iterate through years list to get response data for each year
for y in years_list:
    
    # pass years iteration to year object for passing to API base URL
    year = y
    base_url = '/'.join([host, year, dataset])
    
    # load requests response to object
    r = requests.get(base_url, params=predicates)
    
    # test if response object failed before finishing iteration; this will test 
    # whether or not if the API endpoint was hit successfully; many census API 
    # endpoints do not have data for the year of 2020 due to pandemic disruption,
    # also many of the endpoints change URL and variables for older year endpoints
    if '404' in str(r):
        continue
    
    # setup column headers for a temporary dataframe response data will be passed to
    cols = ['name', 'tot_pop', 'tot_rent_pop', '15-34_rent_multi_1', '15-34_rent_multi_2',
            '15-34_rent_multi_3', '15-34_rent_multi_4', '35-64_rent_multi_1', 
            '35-64_rent_multi_2', '35-64_rent_multi_3', '35-64_rent_multi_4', 
            '65up_rent_multi_1', '65up_rent_multi_2', '65up_rent_multi_3', '65up_rent_multi_4', 
            'state']
    
    # pass response data to a temporary dataframe for appending to main datatframe
    df_temp = pd.DataFrame(columns=cols, data=r.json()[1:])
    
    # add column to temporary dataframe for iteration year's response data
    df_temp['year'] = year
    
    # append temporary dataframe to main dataframe
    df = pd.concat([df, df_temp], ignore_index=True)

# the next section of the script is data transformation

# convert numerical string columns to interger data types
convert_cols = [col for col in df.columns if col not in ['name', 'state']]
for col in convert_cols:
    df[col] = df[col].astype('int')

# get rid of Alaska & Puerto Rico, focus on contiguous US for cleaner visualization
df = df[df.name != 'Alaska']
df = df[df.name != 'Puerto Rico']
df = df[df.name != 'Hawaii']

# move year column from end to first column
cols = list(df.columns)
cols = cols[-1:] + cols[:-1]
df = df[cols]

# calculate total 15-34 multifamily renters and total multifamily renters
df['15-34_rent_multi'] = df['15-34_rent_multi_1'] + df['15-34_rent_multi_2'] 
df['15-34_rent_multi'] = df['15-34_rent_multi']+ df['15-34_rent_multi_3'] 
df['15-34_rent_multi'] = df['15-34_rent_multi'] + df['15-34_rent_multi_4'] 
df['tot_rent_multi'] = df['35-64_rent_multi_1'] + df['35-64_rent_multi_2']
df['tot_rent_multi'] = df['tot_rent_multi'] + df['35-64_rent_multi_3']
df['tot_rent_multi'] = df['tot_rent_multi'] + df['35-64_rent_multi_4']
df['tot_rent_multi'] = df['tot_rent_multi'] + df['65up_rent_multi_1']
df['tot_rent_multi'] = df['tot_rent_multi'] + df['65up_rent_multi_2']
df['tot_rent_multi'] = df['tot_rent_multi'] + df['65up_rent_multi_3']
df['tot_rent_multi'] = df['tot_rent_multi'] + df['65up_rent_multi_4']
df['tot_rent_multi'] = df['tot_rent_multi'] + df['15-34_rent_multi']

# drop unnecessary columns
df = df.drop(['15-34_rent_multi_1', '15-34_rent_multi_2','15-34_rent_multi_3', 
              '15-34_rent_multi_4', '35-64_rent_multi_1', '35-64_rent_multi_2', 
              '35-64_rent_multi_3', '35-64_rent_multi_4', '65up_rent_multi_1', 
              '65up_rent_multi_2', '65up_rent_multi_3', '65up_rent_multi_4', 
              'state'], axis=1)

# calc renter multifamily households aged 15-34 as % of total multifamily households
df['15-34_rent_multi_prcnt'] = df['15-34_rent_multi'] / df['tot_rent_multi']

# export dataframe to excel for loading to Tableau Public and visualization
df.to_excel('prime_renter_households.xlsx', index=False)

### END SCRIPT ###

